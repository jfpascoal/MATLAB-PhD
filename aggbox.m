function [varargout]=aggbox(varargin)
%AGGBOX (v 3.0b, 23-November-2015)
%
%Aggbox generates a GUI that enables the detection and analysis of cell
%aggregates, in images / microphotographs, as to size and circularity.
%The interface assumes the following workflow:
%1- Browse and read the container folder, to detect and list all the
%images.
%2- Choose the image number and load.
%3- Use the edging switch to evaluate the edging and adjust the threshold,
%if necessary (higher threshold returns more restrictive edging). Hit Apply
%to reprocess the image.
%4- Use the object refinement tool to correct the objects. Select 0 to
%erase, or 1 to uncover. Use the slide bar to select the size of the brush.
%When the bar is set to 0 (left), the tool is off. Just move the cursor
%over the image to edit the image. If you adjust the threshold, the changes
%made with this tool will be lost.
%5- Load the data from the objects and use the table to select the number
%of the objects that you wish to export. Selected objects are labeled in
%green and unselected objects are labeled in red. If you wish to go back
%and readjust the threshold or refine the objects, you'll need to reload
%the data.
%6- When you are ready, export the data and move on to the next image.
%Select the type of file that you wish to export to.
%7- When all the images are processed, you'll be prompted to compile all
%the data files into a single file.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Declare globals
% Global handles and variables for GUI operation

% -- Handles for GUI panels
global input_pan objref_pan thresh_pan prevdata_pan export_pan

% --  Handles for pushbuttons and radiobuttons
global browse_but load_but previmg_but nextimg_but import_but ...
    threshapply_but loaddata_but selectall_but export_but refUndo_but ...
    refReset_but erase_rdb paint_rdb

% --  Handles for edit boxes, text boxes and checkboxes
global indir_ed nImgs_tx imgNo_ed statbar_tx mindiam_ed mat_ckb txt_ckb ...
    xls_ckb

% --  Handles for slider bars, uitable and axes/image
global imswitch_sld threshbar_sld brushsz_sld datachart_tbl imgview_ax ...
    imgh

% -- Variables
global dirin imgformatlist folderdir nimgs imglist imgfinder currimg ...
    currimgno currimgname pixelsize convmatrix tabledata exportdata ...
    procdimg logicimg dataset datastats numobj numdisp aggnum ...
    imghistory compiler compdata

% -- Image processing operational variables
global pixelarea threshfact strlenght vfill hfill erstruct mindiam ...
    imswitch threshbar ellinote ellisz nhistory currhistno brushmode

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Initialize GUI
% Build GUI and preset variables and UI controls

% -- Function to build GUI
    function genGUI(~,~)
        guifig=figure('Visible','off',...
            'Name','AggBox v3',...
            'NumberTitle','off',...
            'Resize','off',...
            'Color',[0.941,0.941,0.941],...
            'Position',[300,85,978,716],...
            'WindowStyle','normal');
        
        % -- Build GUI components
        input_pan=uipanel('Parent',guifig,... % -- Input panel
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'Title','Image selection',...
            'Units','characters',...
            'Position',[1.4,50.692,192.4,4.308]);...
            uicontrol('Parent',input_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','Directory:',...
            'Units','characters',...
            'Position',[1.2,1.231,11.8,1.231]);...
            uicontrol('Parent',input_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','Image:',...
            'Units','characters',...
            'Position',[147.2,1.231,7.8,1.231]);...
            indir_ed=uicontrol('Parent',input_pan,...
            'Style','edit',...
            'BackgroundColor',[1,1,1],...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','left',...
            'String','',...
            'Units','characters',...
            'Position',[13,0.769,106.4,2.154]);...
            browse_but=uicontrol('Parent',input_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','Browse',...
            'Units','characters',...
            'Position',[120.8,0.769,13.8,2.154]);...
            load_but=uicontrol('Parent',input_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','Load',...
            'Units','characters',...
            'Position',[135.6,0.769,9.6,2.154]);...
            previmg_but=uicontrol('Parent',input_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',10,...
            'HorizontalAlignment','center',...
            'String','<',...
            'Units','characters',...
            'Position',[156.8,0.769,5.2,2.154]);...
            imgNo_ed=uicontrol('Parent',input_pan,...
            'Style','edit',...
            'BackgroundColor',[1,1,1],...
            'FontName','MS Sans Serif',...
            'FontSize',11,...
            'HorizontalAlignment','right',...
            'String','1',...
            'Units','characters',...
            'Position',[162.4,0.769,5.8,2.154]);...
            nImgs_tx=uicontrol('Parent',input_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',11,...
            'HorizontalAlignment','center',...
            'String','/ 1',...
            'Units','characters',...
            'Position',[168.6,1,6.8,1.538]);...
            nextimg_but=uicontrol('Parent',input_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',10,...
            'HorizontalAlignment','center',...
            'String','>',...
            'Units','characters',...
            'Position',[175.8,0.769,5.2,2.154]);...
            import_but=uicontrol('Parent',input_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','OK',...
            'Units','characters',...
            'Position',[182.4,0.769,7.8,2.154]);
        thresh_pan=uipanel('Parent',guifig,... % -- Threshold selection panel
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'Title','Object detection',...
            'Units','characters',...
            'Position',[159.6,35.108,34,15.538]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'HorizontalAlignment','center',...
            'String','Original',...
            'Units','characters',...
            'Position',[12.8,12.692,8.8,1.231]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'HorizontalAlignment','center',...
            'String','Edged',...
            'Units','characters',...
            'Position',[24.4,12.692,7.2,1.231]);...
            imswitch_sld=uicontrol('Parent',thresh_pan,...
            'Style','slider',...
            'BackgroundColor',[0.9,0.9,0.9],...
            'Min',0,...
            'Max',1,...
            'SliderStep',[1,1],...
            'Units','characters',...
            'Position',[15.6,10.538,13.6,2.154]);
        uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'HorizontalAlignment','center',...
            'String','Min diameter',...
            'Units','characters',...
            'Position',[15.2,8.308,14.2,1.231]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','µm',...
            'Units','characters',...
            'Position',[23.8,6.692,5.2,1.231]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','- 1',...
            'Units','characters',...
            'Position',[9.4,10.846,3.6,1.692]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,10.615,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,9.692,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,8.769,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,7.846,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,6.923,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,6,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,5.077,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,4.154,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','-',...
            'Units','characters',...
            'Position',[9.4,3.231,3.6,1]);...
            uicontrol('Parent',thresh_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','- 0',...
            'Units','characters',...
            'Position',[9.4,1.615,3.6,1.692]);...
            threshbar_sld=uicontrol('Parent',thresh_pan,...
            'Style','slider',...
            'BackgroundColor',[0.9,0.9,0.9],...
            'Min',0,...
            'Max',1,...
            'SliderStep',[0.025,0.1],...
            'Value',0.5,...
            'Units','characters',...
            'Position',[3.8,1,5,12.615]);...
            mindiam_ed=uicontrol('Parent',thresh_pan,...
            'Style','edit',...
            'BackgroundColor',[1,1,1],...
            'FontName','MS Sans Serif',...
            'FontSize',10,...
            'HorizontalAlignment','right',...
            'String','30',...
            'Units','characters',...
            'Position',[16.2,6.231,7.6,1.923]);...
            threshapply_but=uicontrol('Parent',thresh_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',10,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','Apply',...
            'Units','characters',...
            'Position',[15.4,1.385,14.4,3.538]);
        objref_pan=uipanel('Parent',guifig,... % -- Object refinement panel
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'Title','Object refinement',...
            'Units','characters',...
            'Position',[159.6,25.877,34,9.154]);...
            uicontrol('Parent',objref_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'HorizontalAlignment','center',...
            'String','Brush Size',...
            'Units','characters',...
            'Position',[9.6,3.538,14.2,1.231]);...
            uicontrol('Parent',objref_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','off',...
            'Units','characters',...
            'Position',[4.8,0.262,4.4,1.077]);...
            uicontrol('Parent',objref_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',7.5,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','|',...
            'Units','characters',...
            'Position',[11.4,0.262,1.6,1.077]);...
            uicontrol('Parent',objref_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',7.5,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','|',...
            'Units','characters',...
            'Position',[16,0.262,1.6,1.077]);...
            uicontrol('Parent',objref_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',7.5,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','|',...
            'Units','characters',...
            'Position',[20.6,0.262,1.6,1.077]);...
            uicontrol('Parent',objref_pan,...
            'Style','text',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','100',...
            'Units','characters',...
            'Position',[23.2,0.262,5.2,1.077]);...
            refUndo_but=uicontrol('Parent',objref_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'String','Undo',...
            'Units','characters',...
            'Position',[10.4,5.538,9.4,1.692]);...
            refReset_but=uicontrol('Parent',objref_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'String','Reset',...
            'Units','characters',...
            'Position',[20.8,5.538,9.4,1.692]);...
            erase_rdb=uicontrol('Parent',objref_pan,...
            'Style','radiobutton',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'Value',1,...
            'String','0',...
            'Units','characters',...
            'Position',[3,5.846,6.4,1.769]);...
            paint_rdb=uicontrol('Parent',objref_pan,...
            'Style','radiobutton',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'Value',0,...
            'String','1',...
            'Units','characters',...
            'Position',[3,4.077,6.4,1.769]);...
            brushsz_sld=uicontrol('Parent',objref_pan,...
            'Style','slider',...
            'BackgroundColor',[0.9,0.9,0.9],...
            'Min',0,...
            'Max',1,...
            'SliderStep',[0.01,0.1],...
            'Value',0,...
            'Units','characters',...
            'Position',[3.4,1.538,26.6,1.846]);...
            prevdata_pan=uipanel('Parent',guifig,... % -- Preview data panel
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'Title','Preview data',...
            'Units','characters',...
            'Position',[159.6,8.415,34,17.385]);...
            loaddata_but=uicontrol('Parent',prevdata_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','Load',...
            'Units','characters',...
            'Position',[4.4,13.923,25,1.769]);...
            datachart_tbl=uitable('Parent',prevdata_pan,...
            'ColumnFormat',{'numeric','logical'},...
            'ColumnEditable',[false,true],...
            'ColumnName',{'Diameter','Select'},...
            'ColumnWidth',{70,40},...
            'RowStriping','on',...
            'BackgroundColor',[1,1,1;0.95,0.95,0.95],...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'Data',{[],false},...
            'Units','characters',...
            'Position',[2.6,2.769,28.4,10.769]);...
            selectall_but=uicontrol('Parent',prevdata_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','Select all',...
            'Units','characters',...
            'Position',[19,0.615,13.4,1.769]);
        export_pan=uipanel('Parent',guifig,... % -- Export panel
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'Title','Export',...
            'Units','characters',...
            'Position',[159.6,2.262,34,6.077]);...
            export_but=uicontrol('Parent',export_pan,...
            'Style','pushbutton',...
            'FontName','MS Sans Serif',...
            'FontSize',10,...
            'FontWeight','bold',...
            'HorizontalAlignment','center',...
            'String','Export data',...
            'Units','characters',...
            'Position',[5.6,0.692,22.6,2]);...
            mat_ckb=uicontrol('Parent',export_pan,...
            'Style','checkbox',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'String','.mat',...
            'Units','characters',...
            'Position',[4,2.846,9.4,1.769]);...
            txt_ckb=uicontrol('Parent',export_pan,...
            'Style','checkbox',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'String','.txt',...
            'Units','characters',...
            'Position',[13.8,2.846,8.6,1.769]);...
            xls_ckb=uicontrol('Parent',export_pan,...
            'Style','checkbox',...
            'FontName','MS Sans Serif',...
            'FontSize',8,...
            'String','.xls',...
            'Units','characters',...
            'Position',[22.8,2.846,9,1.769]);
        imgview_ax=axes('Parent',guifig,...
            'XTickMode','manual',...
            'XTick',[],...
            'XColor',[1,1,1],...
            'YTickMode','manual',...
            'YTick',[],...
            'YColor',[1,1,1],...
            'Units','pixels',...
            'Position',[11,32,780,624]);
        statbar_tx=uicontrol('Parent',guifig,...
            'Style','text',...
            'BackgroundColor',[0,1,0],...
            'FontName','MS Sans Serif',...
            'FontSize',9,...
            'HorizontalAlignment','center',...
            'String','',...
            'Units','characters',...
            'Position',[2.2,0.315,191.2,1.462]);
        
    end

% --  Function to set/reset the variables
    function resetVars(~,~)
        % Check for input arguments and their validity and set variables
        if nargin>0
            if isdir(varargin{1})
                [~,struc]=filleattrib(varargin{1});
                if struc.UserRead && struc.UserWrite
                    dirin=varargin{1};
                else
                    dirin=cd;
                end
            else
                dirin=cd;
            end
        else
            dirin=cd;
        end
        
        % Preset operational values
        threshfact=0.75;
        strlenght=2;
        vfill=strel('line',strlenght,90);
        hfill=strel('line',strlenght,0);
        erstruct=strel('disk',2);
        mindiam=30;
        pixelsize=1/3.26; % units: micrometer/sqrt(pixel)
        convmatrix=[1/3.26,3072,3840; ...
            1/1.087,1024,1280;
            0,0,0]; % matrix used to confirm that image dimensions match
        % the pixel conversion factor (pixelsize). Add more
        % rows [pixelsize, height, width] as needed.
        ellisz=0;
        nhistory=7;
        brushmode=0;
        
        % Reset variables
        imgformatlist={'.jpg';'.tif';'.png';'.gif'}; % defines the ...
        % acceptable image formats
        folderdir=struct;
        nimgs=[];
        imglist={};
        imgfinder=[];
        currimgname='';
        currimgno=[];
        currimg=[];
        procdimg=[];
        logicimg=[];
        pixelarea=pixelsize^2; % units: micrometer^2/pixel
        tabledata={};
        exportdata=[];
        imswitch=0;
        threshbar=0.5;
        dataset=struct;
        datastats=struct;
        numobj=[];
        numdisp=[];
        aggnum=[];
        imghistory={};
        currhistno=[];
        compiler=0;
        compdata=struct;
        varargout={};
        
        
        % Set UI Controls
        set(indir_ed,'String',dirin)
        set(nImgs_tx,'String','/')
        set(imgNo_ed,'String','',...
            'Enable','off')
        set(previmg_but,'Enable','off')
        set(nextimg_but,'Enable','off')
        set(import_but,'Enable','off')
        set(statbar_tx,'String','Select directory',...
            'BackgroundColor',[0.9,0.9,0.9])
        set(imswitch_sld,'Enable','off')
        set(threshbar_sld,'Enable','off')
        set(mindiam_ed,'String',num2str(mindiam),...
            'Enable','off')
        set(threshapply_but,'Enable','off')
        set(paint_rdb,'Enable','off')
        set(erase_rdb,'Enable','off')
        set(refUndo_but,'Enable','off')
        set(refReset_but,'Enable','off')
        set(brushsz_sld,'Value',0,...
            'Enable','off')
        set(datachart_tbl,'Enable','off')
        set(loaddata_but,'Enable','off')
        set(selectall_but,'Enable','off')
        set(mat_ckb,'Value',0,...
            'Enable','off')
        set(txt_ckb,'Value',0,...
            'Enable','off')
        set(xls_ckb,'Value',0,...
            'Enable','off')
        set(export_but,'String','Export data',...
            'Enable','off')
        
    end

% -- Call initialization functions and turn the GUI visible
genGUI, resetVars
set(guifig,'Visible','on')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% UIcontrol callbacks
% Set the callback functions for UI controls

set(browse_but,'Callback',@browse_Callback)
set(load_but,'Callback',@load_Callback)
set(previmg_but,'Callback',@previmg_Callback)
set(nextimg_but,'Callback',@nextimg_Callback)
set(import_but,'Callback',@import_Callback)
set(threshapply_but,'Callback',@threshapply_Callback)
set(erase_rdb,'Callback',@erase_Callback)
set(paint_rdb,'Callback',@paint_Callback)
set(refUndo_but,'Callback',@refUndo_Callback)
set(refReset_but,'Callback',@refReset_Callback)
set(brushsz_sld,'Callback',@brushsz_Callback)
set(loaddata_but,'Callback',@loaddata_Callback)
set(selectall_but,'Callback',@selectall_Callback)
set(datachart_tbl,'CellEditCallback',@datachart_Callback)
set(txt_ckb,'Callback',@txt_Callback)
set(mat_ckb,'Callback',@mat_Callback)
set(xls_ckb,'Callback',@xls_Callback)
set(export_but,'Callback',@export_Callback)
set(imswitch_sld,'Callback',@dispimg)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% UIcontrol functions
% Functions for management of user interface controls

    function browse_Callback(~,~)
        % Callback for hitting the 'Browse' pushbutton
        n_dirin=uigetdir(dirin,'Choose directory...'); %temp variable
        if n_dirin==0
            return
        end
        dirin=n_dirin;
        set(indir_ed,'String',dirin)
        setInfoBox('Ready to load',[0.9,0.9,0.9]) %local
        clear n_dirin
    end

    function load_Callback(~,~)
        % Callback for hitting the 'Load' pushbutton
        
        % Reset variables and UI controls
        n_dirin=dirin;
        if ~strcmp(get(indir_ed,'String'),n_dirin)
            nn_dirin=get(indir_ed,'String');
        end
        resetVars
        if exist('nn_dirin','var') && exist(nn_dirin,'dir')==7;
            dirin=nn_dirin;
            set(indir_ed,'String',dirin);
        else
            dirin=n_dirin;
            set(indir_ed,'String',dirin)
        end
        
        % Check if the input folder has images for analysis, count the
        % images and build the image dir list.
        setInfoBox('Loading folder...',[1,1,0])
        folderdir=dir(dirin);
        nimgs=0;
        imgfinder=zeros(numel(folderdir),1);
        for i=1:numel(folderdir)
            if numel(folderdir(i).name)>4
                if nnz(...
                        strcmp(...
                        folderdir(i).name(end-3:end),imgformatlist))==1
                    nimgs=nimgs+1;
                    imgfinder(i)=1;
                end
            end
        end
        
        if nimgs>0 % images were found
            imgfinder=find(imgfinder);
            imglist=cell(nimgs,1);
            for i=1:nimgs
                imglist{i}=fullfile(dirin,folderdir(imgfinder(i)).name);
            end
            
            set(nextimg_but,'Enable','on');
            set(nImgs_tx,'String',['/ ',num2str(nimgs)])
            set(imgNo_ed,'Enable','on',...
                'String','1')
            set(import_but,'Enable','on')
            compiler=compilercheck;
            if compiler==0
                setInfoBox('Image list loaded',[0,1,0])
            elseif compiler==1
                setInfoBox(['Image list loaded! Data ready to compile.',...
                    ' Compile data or load image'],[0,1,0])
            end
        else
            setInfoBox('Images not found!',[1,0,0])
            return
        end
    end

    function previmg_Callback(~,~)
        % Callback for hitting the "Previous image" pushbutton.
        
        currimgno=str2double(...
            get(imgNo_ed,'String'));
        
        % Check if input is valid
        if isnan(currimgno) || ...
                round(currimgno)-currimgno~=0 || ...
                currimgno<=0 || ...
                currimgno>nimgs
            setInfoBox('Invalid image number!',[1,0,0])
            return
        end
        
        % Check if input is the minimum (1)
        if currimgno==1
            set(previmg_but,'Enable','off')
            return
        end
        
        % Apply change
        currimgno=currimgno-1;
        set(imgNo_ed,'String',num2str(currimgno))
        if currimgno==1
            set(previmg_but,'Enable','off')
        elseif currimgno<nimgs
            set(nextimg_but,'Enable','on')
        end
    end

    function nextimg_Callback(~,~)
        % Callback for hitting the "Next image" pushbutton
        
        currimgno=str2double(...
            get(imgNo_ed,'String'));
        
        % Check if input is valid
        if isnan(currimgno) || ...
                round(currimgno)-currimgno~=0 || ...
                currimgno<=0 || ...
                currimgno>nimgs
            setInfoBox('Invalid image number!',[1,0,0])
            return
        end
        
        % Check if input is the maximum (nimgs)
        if currimgno==nimgs
            set(nextimg_but,'Enable','off')
            return
        end
        
        % Apply change
        currimgno=currimgno+1;
        set(imgNo_ed,'String',num2str(currimgno))
        if currimgno==nimgs
            set(nextimg_but,'Enable','off')
        elseif currimgno>1
            set(previmg_but,'Enable','on')
        end
    end

    function import_Callback(~,~)
        % Callback for hitting the 'OK' (read image) pushbutton.
        
        setInfoBox('Loading image...',[1,1,0])
        
        % -- Check if inserted image number is valid
        currimgno=str2double(...
            get(imgNo_ed,'String'));
        if isnan(currimgno) || currimgno > nimgs
            setInfoBox('Invalid image number!',[1,0,0])
            return
        else
            currimgname=imglist{currimgno};
            if currimgno<nimgs
                set(nextimg_but,'Enable','on')
            else
                set(nextimg_but,'Enable','off')
            end
            if currimgno>1
                set(previmg_but,'Enable','on')
            else
                set(previmg_but,'Enable','off')
            end
        end
        
        % Turn off compiler mode
        if compiler==1
            set(export_but,'String','Export data',...
                'Enable','off')
            set(txt_ckb,'Value',0,...
                'Enable','off')
            set(mat_ckb,'Value',0,...
                'Enable','off')
            set(xls_ckb,'Value',0,...
                'Enable','off')
            compiler=0;
        end
        
        % Import image and convert to grayscale if RGB
        imghistory={};
        currimg=imread(currimgname);
        imginfo=imfinfo(currimgname);
        
        if strcmp(imginfo.ColorType,'truecolor') % if RGB
            currimg=rgb2gray(currimg);
        elseif ~strcmp(imginfo.ColorType,'grayscale') % elseif not grayscale
            setInfoBox('Invalid image type!',[1,0,0])
            return
        end
        
        % -- Check if image dimensions match the pixel conversion factor
        [row,~]=find(convmatrix==pixelsize | ...
            convmatrix==imginfo.Height | ...
            convmatrix==imginfo.Width);
        if numel(row)<3
            setInfoBox('Unknown conv factor',[1,0,0])
            return
        elseif numel(row)==3
            if row(1)~=row(2) || row(2)~=row(3)
                setInfoBox('Unknown conv factor',[1,0,0])
                return
            end
        else % if one or more of the values are detected in  more that one
            % row in convmatrix.
            nrows=unique(row);
            for i=1:numel(nrows)
                if nnz(...
                        find(row==nrows(i)))==3
                    break
                elseif i==numel(nrows)
                    setInfoBox('Unknown conv factor',[1,0,0])
                    return
                end
            end
        end
        
        % Process and display image
        setInfoBox('Processing image...',[1,1,0])
        imswitch=0;
        set(imswitch_sld,'Enable','on',...
            'Value',imswitch)
        threshbar=0.5;
        set(threshbar_sld,'Enable','on',...
            'Value',threshbar)
        set(mindiam_ed,'Enable','on')
        
        checkpass=imgprocess; %local
        if checkpass==0 % checkpoint for mindiam validity
            return
        end
        
        
        % Check if there's a file with measurements for the selected image
        
        % --- Check for mat file
        matcheck=exist([currimgname(1:end-4),'.mat'],'file');
        
        % --- If matcheck is empty, check for txt or xls files
        expcheck=0;
        if matcheck~=0
           expcheck=exist([currimgname(1:end-4),'.txt'],'file');
           if expcheck==0
               expcheck=exist([currimgname(1:end-4),'.xls'],'file');
           end
        end
        
        % Display image
        dispimg %local
        set(threshapply_but,'Enable','on')
        set(loaddata_but,'Enable','on')
        set(brushsz_sld,'Enable','on')
        
        % Enable pointer change for object refinement
        pointerChange.enterFcn=@mouseEnter;
        pointerChange.traverseFcn=[];
        pointerChange.exitFcn=@mouseExit;
        
        iptSetPointerBehavior(imgview_ax,pointerChange)
        
        if matcheck==0 && expcheck==0
            setInfoBox(['Image processed! ',...
                'Load data after adjustments...'],[0,1,0])
        elseif matcheck~=0
            setInfoBox(['MAT file found! ',...
                'Previous data will be overwritten'],[1,1,0])
        else % if txt or xls file
            setInfoBox(['TXT or XLS file found! Not compilable!',...
                'Previous data will be deleted or overwritten'],[1,1,0])
        end
        
    end

    function threshapply_Callback(~,~)
        % Callback for hitting the "Apply" pushbutton
        
        setInfoBox('Processing image...',[1,1,0])
        resetdata
        imghistory={};
        checkpass=imgprocess;
        if checkpass==0
            return
        end
        dispimg
        setInfoBox('Done!',[0,1,0])
    end

    function erase_Callback(~,~)
        % Callback for selecting the "Erase" (0) radiobutton.
        brushmode=0;
        set(erase_rdb,'Value',1)
        set(paint_rdb,'Value',0)
    end

    function paint_Callback(~,~)
        % Callback for selecting the "Paint" (1) radiobutton.
        brushmode=1;
        set(paint_rdb,'Value',1)
        set(erase_rdb,'Value',0)
    end

    function refUndo_Callback(~,~)
        % Callback for hitting the "Undo" pushbutton.
        
        resetdata
        
        % If the current history number (currhistno) is 2, it means either
        % that it is the first modification, or that the number has circled
        % back to 2. Check if the last history slot is empty, to determine
        % which is the case.
        if currhistno==2
            if isempty(imghistory{nhistory})
                currhistno=1;
                logicimg=imghistory{currhistno};
                imghistory{2}={};
                set(refUndo_but,'Enable','off')
                set(refReset_but,'Enable','off')
            else
                currhistno=nhistory;
                logicimg=imghistory{currhistno};
                imghistory{2}={};
            end
            % Else, go back to the previous history slot and empty the
            % current.
        else
            imghistory{currhistno}={};
            currhistno=currhistno-1;
            logicimg=imghistory{currhistno};
            if isempty(imghistory{currhistno-1})
                set(refUndo_but,'Enable','off')
            end
        end
        
        % Process image
        procdimg=currimg;
        procdimg(logicimg==0)=255;
        
        setInfoBox(['Modifications undone! ',...
            'Continue adjustments or load data'],[0,1,0])
        dispimg
        
    end

    function refReset_Callback(~,~)
        % Callback for hitting the "Reset" pushbutton.
        
        resetdata
        currhistno=1;
        logicimg=imghistory{currhistno};
        for i=2:nhistory
            imghistory{i}={};
        end
        
        % Process image
        procdimg=currimg;
        procdimg(logicimg==0)=255;
        
        set(refUndo_but,'Enable','off')
        setInfoBox(['All modifications undone! ',...
            'Continue adjustments, or load data...'],[0,1,0])
        dispimg
    end

    function brushsz_Callback(~,~)
        % Callback for moving the "Brush Size" slider.
        % Moving the slider to 0 switches off the tool. It does not reset
        % the image history. If the object data has been loaded, it gets
        % deleted and needs to be loaded again.
        
        brushsz=get(brushsz_sld,'Value');
        if brushsz==0
            set(erase_rdb,'Enable','off')
            set(paint_rdb,'Enable','off')
            iptPointerManager(guifig,'Disable')
            set(imgview_ax,'ButtonDownFcn',[])
        else
            set(erase_rdb,'Enable','on')
            set(paint_rdb,'Enable','on')
            ellisz=round(brushsz*100/pixelsize); % the slider value refers
            % to the diameter of the
            % brush, in micrometers.
            iptPointerManager(guifig,'Enable')
            if isempty(imghistory)
                currhistno=1;
                imghistory=cell(1,nhistory+1);
                imghistory{1}=logicimg;
            elseif ~isempty(numobj)
                resetdata
            end
        end
    end

    function loaddata_Callback(~,~)
        % Callback for hitting the "Load" pushbutton.
        
        mouseExit
        set(datachart_tbl,'Enable','on') % Enable table
        iptPointerManager(guifig,'disable')
        set(brushsz_sld,'Value',0)
        set(paint_rdb,'Enable','off')
        set(erase_rdb,'Enable','off')
        
        
        % Refine logicimg to erase objects smaller than mindiam
        minarea=round((pi*(mindiam/2)^2)/pixelarea);
        logicimg=bwareaopen(logicimg,minarea);
        
        % Get object stats, convert to micrometers, display data and labels
        datastats=regionprops(logicimg,'Area','Centroid','Perimeter',...
            'Eccentricity','MajorAxisLength','MinorAxisLength');
        numobj=numel(datastats);
        tabledata=cell(numobj,2);
        numdisp=cell(numobj,1);
        aggnum=zeros(numobj,1);
        
        for i=1:numobj
            % Convert/calculate object stats
            datastats(i).Area=datastats(i).Area*pixelarea;
            datastats(i).Perimeter=datastats(i).Perimeter*pixelsize;
            datastats(i).MajorAxisLength=...
                datastats(i).MajorAxisLength*pixelsize;
            datastats(i).MinorAxisLength=...
                datastats(i).MinorAxisLength*pixelsize;
            datastats(i).Diameter=sqrt(4*datastats(i).Area/pi);
            datastats(i).Circularity=datastats(i).Area*4*pi/...
                datastats(i).Perimeter^2;
            
            % Set tabledata
            tabledata{i,1}=round(datastats(i).Diameter);
            tabledata{i,2}=0;
            
            % Set object labels
            numdisp{i}=num2str(i);
            aggnum(i)=text(datastats(i).Centroid(1),...
                datastats(i).Centroid(2),...
                numdisp(i),...
                'Color',[1,0,0],...
                'FontSize',13,...
                'FontWeight','normal');
        end
        
        set(datachart_tbl,'Data',tabledata) % display data on table
        set(selectall_but,'Enable','on')
        set(export_but,'Enable','on')
        set(mat_ckb,'Enable','on',...
            'Value',1)
        set(txt_ckb,'Enable','on',...
            'Value',1)
        set(xls_ckb,'Enable','on',...
            'Value',0)
        setInfoBox('Select & export...',[0,1,0])
        
    end

    function datachart_Callback(~,eventdata)
        % Callback for editing the "Selected" column, in the data table.
        
        targetcell=eventdata.Indices(1);
        newval=eventdata.EditData;
        
        tabledata{targetcell,2}=newval;
        set(datachart_tbl,'Data',tabledata) % display data on table
        setaggnum
    end

    function selectall_Callback(~,~)
        % Callback for hitting the "Select all" pushbuton
        
        tabledata(:,2)=num2cell(true(numobj,1));
        set(datachart_tbl,'Data',tabledata) % display data on table
        setaggnum
    end

    function txt_Callback(~,~)
        % Callback for selecting the "*.txt" checkbox.
        
        if get(txt_ckb,'Value')==1
            set(export_but,'Enable','on')
        elseif get(mat_ckb,'Value')==0 && get(xls_ckb,'Value')==0
            set(export_but,'Enable','off')
        end
    end

    function mat_Callback(~,~)
        % Callback for selecting the "*.mat" checkbox.
        
        if get(mat_ckb,'Value')==1
            set(export_but,'Enable','on')
            setInfoBox('Select & export...',[0,1,0])
        elseif get(txt_ckb,'Value')==0 && get(xls_ckb,'Value')==0
            set(export_but,'Enable','off')
        else
            setInfoBox(['The data compiler is only compatible',...
                ' with .mat files!'],[1,1,0])
        end
    end

    function xls_Callback(~,~)
        % Callback for selecting the "*.xls" checkbox.
        
        if get(xls_ckb,'Value')==1
            set(export_but,'Enable','on')
        elseif get(txt_ckb,'Value')==0 && get(mat_ckb,'Value')==0
            set(export_but,'Enable','off')
        end
    end

    function export_Callback(~,~)
        % Callback for hitting the "Export" pushbutton.
        
        switch compiler
            case 0
                % Find which objects are selected to be exported and create
                % structure "data2export" with relevant data
                obj2export=find([tabledata{:,2}]);
                data2export=struct;
                for i=1:numel(obj2export)
                    data2export(i).Area=...
                        datastats(obj2export(i)).Area;
                    data2export(i).Perimeter=...
                        datastats(obj2export(i)).Perimeter;
                    data2export(i).Eccentricity=...
                        datastats(obj2export(i)).Eccentricity;
                    data2export(i).MinorAxisLength=...
                        datastats(obj2export(i)).MinorAxisLength;
                    data2export(i).MajorAxisLength=...
                        datastats(obj2export(i)).MajorAxisLength;
                    data2export(i).Diameter=...
                        datastats(obj2export(i)).Diameter;
                    data2export(i).Circularity=...
                        datastats(obj2export(i)).Circularity;
                end
                
                
                % Delete any existing data files
                if exist([currimgname(1:end-4),'.txt'],'file')==2
                    delete([currimgname(1:end-4),'.txt'])
                end
                if exist([currimgname(1:end-4),'.mat'],'file')==2
                    delete([currimgname(1:end-4),'.mat'])
                end
                if exist([currimgname(1:end-4),'.xls'],'file')==2
                    delete([currimgname(1:end-4),'.xls'])
                end
                
                % Save *.txt file
                if get(txt_ckb,'Value')==1
                    exptable=struct2table(data2export);
                    writetable(exptable,...
                        [currimgname(1:end-4),'.txt'],...
                        'Delimiter','tab');
                end
                
                
                % Save *.mat file
                if get(mat_ckb,'Value')==1
                    save([currimgname(1:end-4),'.mat'],...
                        'data2export')
                end
                
                % Save *.xls file
                if get(xls_ckb,'Value')==1
                    if exist([currimgname(1:end-4),'.txt'],'file')==0
                        exptable=struct2table(data2export);
                        writetable(exptable,...
                            [currimgname(1:end-4),'.txt'],...
                            'Delimiter','tab');
                        copyfile([currimgname(1:end-4),'.txt'],...
                            [currimgname(1:end-4),'.xls'],'f')
                        delete([currimgname(1:end-4),'.txt'])
                    else
                        copyfile([currimgname(1:end-4),'.txt'],...
                            [currimgname(1:end-4),'.xls'],'f')
                    end
                end
                
                
                % Disable/Reset UI controls
                resetdata
                set(brushsz_sld,'Enable','off')
                set(refUndo_but,'Enable','off')
                set(refReset_but,'Enable','off')
                set(threshbar_sld,'Enable','off')
                set(threshapply_but,'Enable','off')
                set(mindiam_ed,'Enable','off')
                set(imswitch_sld,'Enable','off')
                set(loaddata_but,'Enable','off')
                setInfoBox('Data exported! Proceed to next image!',...
                    [0,1,0])
                
                compiler=compilercheck;
                if compiler==1
                    setInfoBox(['Data exported! ',...
                        'Compile data or load a new image or folder'],[0,1,0])
                end
                
                
            case 1 %compiler mode
                
                % List all the relevant .mat files
                matdir=what(dirin);
                matdir=matdir.mat;
                matfinder=zeros(1,numel(matdir));
                for i=1:numel(matdir)
                    tempmat=matdir{i}(1:end-4);
                    matchecker=strfind(imglist,tempmat);
                    if ~isempty([matchecker{:}])
                        matfinder(i)=1;
                    end
                end
                matfinder=find(matfinder);
                
                % Load data
                for i=1:numel(matfinder)
                    aggdata=load(...
                        fullfile(dirin,matdir{matfinder(i)}));
                    if numel(aggdata)~=1
                        setInfoBox(['Invalid data file: ',...
                            matdir{matfinder(i)}],[1,0,0])
                        return
                    end
                    aggdata=struct2cell(aggdata);
                    aggdata=aggdata{1};
                    
                    % Check if data is struct. If double, convert to struct
                    % with fieldname "Diameter".
                    if isnumeric(aggdata) && isvector(aggdata)
                        taggdata=struct('Diameter',[]);
                        for j=1:numel(aggdata)
                            taggdata(j).Diameter=aggdata(j);
                        end
                        aggdata=taggdata;
                        clear taggdata
                    elseif ~isstruct(aggdata)
                        setInfoBox(['Invalid data type in: '...
                            matdir{matfinder(i)}],[1,0,0])
                    end
                    
                    % Get field names from data structure
                    fieldn=fieldnames(aggdata);
                    
                    % Get number of compiled elements in output variable
                    % "compdata"
                    if i==1
                        compdataN=0;
                    else
                        compdataN=numel(compdata);
                    end
                    
                    % Copy the values from each field to corresponding
                    % fields in  the output vaiable "compdata"
                    for j=1:numel(aggdata)
                        for k=1:numel(fieldn)
                            compdata(compdataN+j).(fieldn{k})=...
                                aggdata(j).(fieldn{k});
                        end
                        compdata(compdataN+j).Source=...
                            matdir{matfinder(i)};
                    end
                end
                
                % Export to txt file
                if get(txt_ckb,'Value')==1
                    exptable=struct2table(compdata);
                    writetable(exptable,...
                        fullfile(dirin,'compiled.txt'),...
                        'Delimiter','tab');
                end
                
                % Export to mat file
                if get(mat_ckb,'Value')==1
                    save(fullfile(dirin,'compiled.mat'),...
                        'compdata')
                end
                
                % Save *.xls file
                if get(xls_ckb,'Value')==1
                    if exist(fullfile(dirin,'compiled.txt'),'file')==0
                        exptable=struct2table(compdata);
                        writetable(exptable,...
                            fullfile(dirin,'compiled.txt'),...
                            'Delimiter','tab');
                        copyfile(fullfile(dirin,'compiled.txt'),...
                            fullfile(dirin,'compiled.xls'),'f')
                        delete(fullfile(dirin,'compiled.txt'))
                    else
                        copyfile(fullfile(dirin,'compiled.txt'),...
                            fullfile(dirin,'compiled.xls'),'f')
                    end
                end
                setInfoBox(['Compiled data and exported! ',...
                    'Load new folder or exit.'],[0,1,0])
                set(export_but,'String','Export data',...
                    'Enable','off')
                set(txt_ckb,'Value',0,...
                    'Enable','off')
                set(mat_ckb,'Value',0,...
                    'Enable','off')
                set(xls_ckb,'Value',0,...
                    'Enable','off')
        end
    end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Local functions (operational)
% Functions for background operations, controls and responses.

    function setInfoBox(infoTxt,infoColor)
        % setInfoBox automatically sets the text and background color in
        % display in statbar_tx.
        set(statbar_tx,'String',infoTxt,'BackgroundColor',infoColor)
        drawnow
    end

    function checkpass=imgprocess(~,~)
        % Function for processing/edging the image.
        % The "checkpass" output works as a checkpoint to confirm that the
        % input value for minimum diameter (mindiam) is valid.
        
        imswitch=get(imswitch_sld,'Value');
        threshbar=get(threshbar_sld,'Value')*threshfact*2;
        
        mindiam=str2double(...
            get(mindiam_ed,'String'));
        if isnan(mindiam) || mindiam<0
            checkpass=0;
            setInfoBox('Invalid min diameter!',[1,0,0])
            return
        else
            checkpass=1;
        end
        
        minarea=round((pi*(mindiam/2)^2)/pixelarea); % define minimum area
        
        [~,thresh]=edge(currimg,'sobel');
        logicimg=edge(currimg,'sobel',thresh*threshbar); % edging
        
        logicimg=imfill(... % -------------------------\ filling
            bwmorph(... % ------------------------ \   |
            imdilate(logicimg,[vfill,hfill]),...   |   |
            'majority'),... % ---------------------/   |
            'holes'); % -------------------------------/
        
        logicimg=bwareaopen(... % ----------------------\ trimming
            bwmorph(... % --------------------------\   |
            bwmorph(... % ----------------------\   |   |
            imerode(... % ------------------\   |   |   |
            imerode(logicimg,erstruct),...% |   |   |   |
            erstruct),... % ----------------/   |   |   |
            'majority'),... % ------------------/   |   |
            'hbreak'),... % ------------------------/   |
            minarea); % --------------------------------/
        
        procdimg=currimg;
        procdimg(logicimg==0)=255;
        
    end

    function dispimg(~,~)
        % Function for printing the current image on the axes.
        
        imswitch=round(get(imswitch_sld,'Value'));
        switch imswitch
            case 0
                visibleimg=currimg;
            case 1
                visibleimg=procdimg;
        end
        imgh=imshow(visibleimg);
        set(imgh,'HitTest','off')
        set(imgview_ax,'HitTest','on',...
            'PickableParts','all')
        setaggnum
    end

    function setaggnum(~,~)
        % Function for setting the object numbers and printing them on the
        % axes.
        
        % Check if aggnum has been set
        if isempty(aggnum)
            return
        elseif ~isgraphics(aggnum)
            for i=1:numobj
                aggnum(i)=text(datastats(i).Centroid(1),...
                    datastats(i).Centroid(2),...
                    numdisp(i));
            end
        end
        
        for i=1:numobj
            switch tabledata{i,2}
                case 0
                    set(aggnum(i),...
                        'Color',[1,0,0],...
                        'FontSize',13,...
                        'FontWeight','normal');
                case 1
                    set(aggnum(i),...
                        'Color',[0,1,0],...
                        'FontSize',16,...
                        'FontWeight','bold');
            end
        end
        
        
    end

    function resetdata(~,~)
        % Function for reseting the data/object variables and UIs.
        numobj=[];
        datastats={};
        aggnum=[];
        tabledata={};
        set(datachart_tbl,'Data',{[],false},...
            'Enable','off')
        set(selectall_but,'Enable','off')
        set(export_but,'Enable','off')
        set(mat_ckb,'Value',0,...
            'Enable','off')
        set(txt_ckb,'Value',0,...
            'Enable','off')
        set(xls_ckb,'Value',0,...
            'Enable','off')
        drawnow
    end

    function mouseEnter(~,~)
        % enterFcn for iptSetPointerBehavior, when the pointer enters
        % imgview_ax.
        
        % Switch to processed image
        set(imswitch_sld,'Value',1)
        dispimg
        
        % Set buttondownfcn
        set(imgview_ax,'ButtonDownFcn',@objref)
        
        % Change pointer to transparent cursor
        set(guifig,'Pointer','custom',...
            'PointerShapeCData',nan(16));
        %        set(guifig,'Pointer','cross')
        
        % Set pointer behavior and create brush as ellipse annotation.
        set(guifig,'WindowButtonMotionFcn',@mouseCross)
        ellinote=annotation('ellipse',...
            'HitTest','off',...
            'PickableParts','none',...
            'Position',[1,1,ellisz,ellisz],...
            'LineWidth',0.5);
        set(ellinote,'Parent',imgview_ax) %set as child object of axes
        drawnow
    end

    function mouseExit(~,~)
        % exitFcn for iptSetPointerBehavior, when the pointer exits
        % imgview_ax.
        set(guifig,'Pointer','arrow');
        set(guifig,'WindowButtonMotionFcn',[])
        delete(ellinote)
        drawnow
    end

    function mouseCross(~,~)
        % Function that defines the pointer behavior when moving inside the
        % imgview_ax, when the object refinement tool is active.
        
        % Get the current pointer position and set the annotation ellipse
        % position accordingly. This way, the brush will move along wih the
        % cursor. The disabled "PickableParts" property allows the
        % imgview_ax to catch the mouse clicks and change the image
        % (@objref).
        
        cp=get(imgview_ax,'CurrentPoint');
        if ~ishandle(ellinote)
            return
        end
        set(ellinote,...
            'Position',[cp(1,1)-ellisz/2,cp(1,2)-ellisz/2,ellisz,ellisz])
        drawnow
    end

    function objref(~,~)
        % ButtonDownFcn for imgview_ax
        
        % Check image history number and advance
        if currhistno<nhistory
            currhistno=currhistno+1;
        else
            currhistno=2;
        end
        
        % Check current point and change logicimg and procdimg, according to
        % brushmode.
        cp=get(imgview_ax,'CurrentPoint');
        [imgY,imgX]=size(logicimg);
        cpX=round(cp(1,1));
        cpY=round(cp(1,2));
        [x,y]=meshgrid(-cpX+1:imgX-cpX,...
            -cpY+1:imgY-cpY);
        switch brushmode
            case 0
                logicimg(sqrt(x.^2+y.^2)<=ellisz/2)=0;
                procdimg(logicimg==0)=255;
            case 1
                logicimg(sqrt(x.^2+y.^2)<=ellisz/2)=1;
                procdimg=currimg;
                procdimg(logicimg==0)=255;
        end
        dispimg %local
        
        % Redraw annotation ellipse and reset image/axes properties
        ellinote=annotation('ellipse',...
            'HitTest','off',...
            'PickableParts','none',...
            'LineWidth',0.5);
        set(ellinote,'Parent',imgview_ax,...
            'Position',[cpX-ellisz/2,cpY-ellisz/2,ellisz,ellisz])
        set(imgh,'HitTest','off')
        set(imgview_ax,'HitTest','on',...
            'PickableParts','all',...
            'ButtonDownFcn',@objref)
        
        % Store logicimg in history
        imghistory{currhistno}=logicimg;
        
        % Update uicontrols
        setInfoBox(['Image modified... ',...
            'Continue adjustment, or load data.'],[0,1,0])
        set(refUndo_but,'Enable','on')
        set(refReset_but,'Enable','on')
    end

    function compiler=compilercheck(~,~)
        % Check if all images are processed and turn on the
        % compiler mode
        
        matdir=what(dirin);
        matdir=matdir.mat;
        if numel(matdir)<nimgs
            compiler=0;
            return
        else
            k=0;
            for i=1:numel(matdir)
                tempmat=matdir{i}(1:end-3);
                matchecker=strfind(imglist,tempmat);
                if ~isempty([matchecker{:}])
                    k=k+1;
                end
            end
            if k<nimgs
                compiler=0;
                return
            elseif k==nimgs %if all images are processed
                set(export_but,'String','Compile data',...
                    'Enable','on')
                set(mat_ckb,'Value',1,...
                    'Enable','on')
                set(txt_ckb,'Value',1,...
                    'Enable','on')
                set(xls_ckb,'Value',0,...
                    'Enable','on')
                compiler=1;
            end
        end
        
    end

uiwait
end

